name: Update GitHub Productivity Tracker
on:
  schedule:
    - cron: "0 6 * * *" # daily at 06:00 UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Get month date range
        id: dates
        run: |
          FIRST_DAY=$(date -u +%Y-%m-01)
          NEXT_MONTH_FIRST=$(date -u -d "$(date -u +%Y-%m-01) +1 month" +%Y-%m-01)
          LAST_DAY=$(date -u -d "$NEXT_MONTH_FIRST -1 day" +%Y-%m-%d)
          echo "first=$FIRST_DAY" >> $GITHUB_OUTPUT
          echo "last=$LAST_DAY" >> $GITHUB_OUTPUT

      - name: Query GitHub GraphQL for contributions in month
        id: contributions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          OWNER="${{ github.repository_owner }}"
          FIRST="${{ steps.dates.outputs.first }}"
          LAST="${{ steps.dates.outputs.last }}"

          # Build JSON payload safely using jq
          PAYLOAD=$(jq -nc --arg login "$OWNER" --arg from "${FIRST}T00:00:00Z" --arg to "${LAST}T23:59:59Z" \
            '{query:"query($login: String!, $from: DateTime!, $to: DateTime!){ user(login: $login){ contributionsCollection(from: $from, to: $to){ contributionCalendar{ totalContributions } } } }", variables:{login:$login, from:$from, to:$to}}')

          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            https://api.github.com/graphql)

          echo "response=$RESPONSE" >> $GITHUB_OUTPUT

      - name: Parse contributions count
        id: parse
        env:
          RESPONSE: ${{ steps.contributions.outputs.response }}
        run: |
          COUNT=$(echo "$RESPONSE" | jq -r '.data.user.contributionsCollection.contributionCalendar.totalContributions')
          echo "count=$COUNT" >> $GITHUB_OUTPUT

      - name: Update README section (python)
        id: update_readme
        env:
          CONTRIB_COUNT: ${{ steps.parse.outputs.count }}
        run: |
          python3 <<'PYTHON_SCRIPT'
          import re, math, os
          from pathlib import Path

          p = Path("README.md")
          if not p.exists():
              print("README.md not found")
              exit(1)

          count = int(os.environ.get("CONTRIB_COUNT", "0"))
          
          tiers = [
              {"name":"Inactive","max":9,"emoji":"🪶"},
              {"name":"Emerging Contributor","max":49,"emoji":"🌱"},
              {"name":"Consistent Developer","max":99,"emoji":"⚙️"},
              {"name":"Productive Developer","max":199,"emoji":"💻"},
              {"name":"Highly Active Maintainer","max":399,"emoji":"🚀"},
              {"name":"Power Contributor","max":10**9,"emoji":"🔥"},
          ]

          tier = next(t for t in tiers if count <= t["max"])
          next_tier = tiers[tiers.index(tier)+1] if tiers.index(tier)+1 < len(tiers) else tier
          next_max = next_tier["max"]
          progress_pct = int(min(100, math.floor((count / next_max) * 100))) if next_max else 100
          blocks = int(round(progress_pct/5))
          bar = "█"*blocks + "░"*(20-blocks)

          # Determine tier status indicator
          tier_idx = tiers.index(tier)
          status_indicators = []
          for i, t in enumerate(tiers):
              if i < tier_idx:
                  status_indicators.append("✓")
              elif i == tier_idx:
                  status_indicators.append("●")
              else:
                  status_indicators.append("○")
          
          new_section = f"""### Monthly Contribution Analysis

          | Tier Level | Contribution Range | Status | Progress |
          |:-----------|:------------------:|:------:|:---------|
          | **Level 0** – Inactive | 0–9 | {status_indicators[0]} | Baseline activity |
          | **Level 1** – Emerging Contributor | 10–49 | {status_indicators[1]} | Building consistency |
          | **Level 2** – Consistent Developer | 50–99 | {status_indicators[2]} | Regular contributions |
          | **Level 3** – Productive Developer | 100–199 | {status_indicators[3]} | High engagement |
          | **Level 4** – Highly Active Maintainer | 200–399 | {status_indicators[4]} | Sustained excellence |
          | **Level 5** – Power Contributor | 400+ | {status_indicators[5]} | Elite performance |

          #### Current Performance Summary
          
          - **Active Tier:** Level {tier_idx} – {tier["name"]}
          - **Monthly Contributions:** {count}
          - **Next Milestone:** Level {tiers.index(next_tier)} – {next_tier["name"]} ({next_max} contributions)
          - **Completion:** {bar} **{progress_pct}%** ({count}/{next_max})
          
          > **Note:** Metrics update daily at 06:00 UTC based on GitHub contribution data for the current calendar month.
          """

          text = p.read_text(encoding="utf-8")
          new_text = re.sub(
              r"<!--START_SECTION:productivity-->[\s\S]*?<!--END_SECTION:productivity-->",
              f"<!--START_SECTION:productivity-->\n{new_section}\n<!--END_SECTION:productivity-->",
              text
          )
          p.write_text(new_text, encoding="utf-8")
          print("README updated")
          PYTHON_SCRIPT

      - name: Commit and push changes
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          git commit -m "chore: update productivity tracker" || echo "No changes to commit"
          git push